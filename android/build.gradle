// Top-level build.gradle for all sub-projects

buildscript {
    repositories {
        maven { url "https://maven.aliyun.com/repository/google" }
        maven { url "https://maven.aliyun.com/repository/central" }
        maven { url "https://maven.aliyun.com/repository/jcenter" }
        maven { url "https://maven.aliyun.com/repository/public" }
        maven {
            url "http://download.flutter.io"
            allowInsecureProtocol = true
        }
        google()
        mavenCentral()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:7.4.0"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.9.23"
    }
}

allprojects {
    repositories {
        maven { url "https://maven.aliyun.com/repository/google" }
        maven { url "https://maven.aliyun.com/repository/central" }
        maven { url "https://maven.aliyun.com/repository/jcenter" }
        maven { url "https://maven.aliyun.com/repository/public" }
        maven {
            url "http://download.flutter.io"
            allowInsecureProtocol = true
        }
        google()
        mavenCentral()
    }
}

ext {
    kotlin_version = '1.9.23'
}

subprojects {
    // 1. 统一 Java 编译版本为 17
    project.plugins.withType(com.android.build.gradle.BasePlugin) {
        project.android {
            compileOptions {
                sourceCompatibility JavaVersion.VERSION_17
                targetCompatibility JavaVersion.VERSION_17
            }
            // 配置 Kotlin JVM Toolchain（对所有 Kotlin 任务生效）
            kotlinOptions {
                jvmTarget = "17"
            }
            kotlin {
                jvmToolchain {
                    (this as JavaToolchainSpec).languageVersion.set(JavaLanguageVersion.of(17))
                }
            }
        }
    }

    // 2. 原有的 Manifest/namespace 修复逻辑
    afterEvaluate { project ->
        if (project.extensions.findByName("android") != null) {
            Integer pluginCompileSdk = project.android.compileSdk
            if (pluginCompileSdk != null && pluginCompileSdk < 31) {
                project.android {
                    compileSdk 31
                }
            }
        }

        if (project.hasProperty('android')) {
            project.android {
                if (namespace == null) {
                    namespace project.group
                }
            }

            project.tasks.register("fixManifestsAndNamespace") {
                doLast {
                    def bd = file("${project.projectDir}/build.gradle")
                    if (bd.exists()) {
                        def text = bd.getText('UTF-8')
                        def mf = file("${project.projectDir}/src/main/AndroidManifest.xml")
                        if (mf.exists()) {
                            def mc = mf.getText('UTF-8')
                            def pkg = mc.find(/package="([^"]+)"/) { m, p -> p }
                            if (pkg && !text.contains("namespace")) {
                                text = text.replaceFirst(/android\s*\{/, "android {\n    namespace '$pkg'")
                                bd.write(text, 'UTF-8')
                            }
                        }
                    }
                    fileTree(dir: project.projectDir, includes: ['**/AndroidManifest.xml']).each { File m ->
                        def c = m.getText('UTF-8')
                        if (c.contains('package=')) {
                            c = c.replaceAll(/package="[^"]*"/, '')
                            m.write(c, 'UTF-8')
                        }
                    }
                }
            }
            project.tasks.matching { it.name.startsWith("preBuild") }.all {
                dependsOn project.tasks.named("fixManifestsAndNamespace")
            }
        }

        project.buildDir = "${rootProject.buildDir}/${project.name}"
    }

    project.evaluationDependsOn(':app')
}

// Clean 任务
tasks.register("clean", Delete) {
    delete rootProject.buildDir
}
